name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release and plugins
        run: |
          npm install -g \
            semantic-release@^23.0.0 \
            @semantic-release/changelog@^6.0.0 \
            @semantic-release/git@^10.0.0 \
            @semantic-release/github@^10.0.0 \
            @semantic-release/commit-analyzer@^12.0.0 \
            @semantic-release/release-notes-generator@^13.0.0 \
            conventional-changelog-conventionalcommits@^7.0.0

      - name: Verify release conditions
        id: verify
        run: |
          # Check if there are any releasable commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, will create first release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Last tag: $LAST_TAG"
            # Check if there are commits since last tag
            COMMIT_COUNT=$(git rev-list ${LAST_TAG}..HEAD --count)
            echo "Commits since last tag: $COMMIT_COUNT"
            if [ "$COMMIT_COUNT" -gt 0 ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "No new commits since last release"
            fi
          fi

      - name: Cache CPM dependencies
        if: steps.verify.outputs.should_release == 'true'
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
            ~/.cache/CPM
          key: ${{ runner.os }}-cpm-release-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cpm-release-
            ${{ runner.os }}-cpm-

      - name: Install dependencies
        if: steps.verify.outputs.should_release == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++

      - name: Install OR-Tools
        if: steps.verify.outputs.should_release == 'true'
        run: |
          # Download OR-Tools binary release for Ubuntu
          ORTOOLS_VERSION="9.10.4067"
          ORTOOLS_URL="https://github.com/google/or-tools/releases/download/v9.10/or-tools_amd64_ubuntu-24.04_cpp_v${ORTOOLS_VERSION}.tar.gz"

          wget -q "${ORTOOLS_URL}" -O ortools.tar.gz
          sudo mkdir -p /opt/or-tools
          sudo tar -xzf ortools.tar.gz -C /opt/or-tools --strip-components=1

          # Add to CMAKE_PREFIX_PATH
          echo "CMAKE_PREFIX_PATH=/opt/or-tools:${CMAKE_PREFIX_PATH}" >> $GITHUB_ENV

      - name: Build Linux binary (Release)
        if: steps.verify.outputs.should_release == 'true'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DBUILD_BENCHMARKS=OFF
          cmake --build build --config Release --target golomb_cli -j
          strip build/golomb_cli
          chmod +x build/golomb_cli

      - name: Verify binary
        if: steps.verify.outputs.should_release == 'true'
        run: |
          echo "Linux binary:"
          file build/golomb_cli
          ls -lh build/golomb_cli

      - name: Run semantic-release
        if: steps.verify.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: npx semantic-release

      - name: Summary
        if: steps.verify.outputs.should_release == 'true'
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release has been created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Linux binary: \`golomb_cli-linux-x64\`" >> $GITHUB_STEP_SUMMARY
          echo "- Changelog: \`CHANGELOG.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "- [Documentation](https://gotman08.github.io/golomb/)" >> $GITHUB_STEP_SUMMARY

      - name: No release needed
        if: steps.verify.outputs.should_release != 'true'
        run: |
          echo "## No Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No releasable commits found since last release." >> $GITHUB_STEP_SUMMARY
          echo "Use conventional commit messages (feat:, fix:, etc.) to trigger releases." >> $GITHUB_STEP_SUMMARY
